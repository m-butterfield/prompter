package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/m-butterfield/prompter/server/app/data"
	"github.com/m-butterfield/prompter/server/app/graph/generated"
	"github.com/m-butterfield/prompter/server/app/graph/model"
	"google.golang.org/api/oauth2/v2"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserCreds) (*data.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	gctx, err := ginContextFromContext(ctx)
	if err != nil {
		return false, internalError(err)
	}
	cookie, err := getSessionCookie(gctx.Request)
	if err != nil {
		return false, internalError(err)
	}
	if cookie == nil {
		return true, nil
	}
	if err := r.DS.DeleteAccessToken(cookie.Value); err != nil {
		return false, internalError(err)
	}
	unsetSessionCookie(gctx.Writer)
	return true, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, credential string) (*data.User, error) {
	oauth2Service, err := oauth2.NewService(ctx)
	tokenInfoCall := oauth2Service.Tokeninfo()
	tokenInfoCall.IdToken(credential)
	tokenInfo, err := tokenInfoCall.Do()
	if err != nil {
		return nil, err
	}

	user, err := r.DS.GetUser(tokenInfo.Email)
	if err != nil {
		return nil, internalError(err)
	}
	if user == nil {
		user = &data.User{
			Username: tokenInfo.Email,
		}
		if err = r.DS.CreateUser(user); err != nil {
			return nil, internalError(err)
		}
	}

	if err = cookieLogin(ctx, r.DS, user); err != nil {
		return nil, internalError(err)
	}

	return user, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*data.User, error) {
	user, err := loggedInUser(ctx)
	if err != nil {
		return nil, internalError(err)
	}
	return user, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, username string) (*data.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
